{
  "/Users/sergio/Desktop/WORKWORK/sofftek /swapi-test": {
    "versionSfCore": null,
    "versionFramework": "4.4.6",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "/Users/sergio/Desktop/WORKWORK/sofftek /swapi-test",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "swapi-service",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "us-east-1",
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "GetPersonajeUnicoLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-service-dev-getPersonajeUnico"
              }
            },
            "GetPersonajesUnicosLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-service-dev-getPersonajesUnicos"
              }
            },
            "GetPeliculaLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-service-dev-getPelicula"
              }
            },
            "GetPersonaLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-service-dev-getPersona"
              }
            },
            "PostPersonajeUnicoLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-service-dev-postPersonajeUnico"
              }
            },
            "GetApiDocsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-service-dev-getApiDocs"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "swapi-service",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-service-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-service-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "swapi-service",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GetPersonajeUnicoLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-9d3b6be7-4e2c",
                  "S3Key": "serverless/swapi-service/dev/1729244276431-2024-10-18T09:37:56.431Z/swapi-service.zip"
                },
                "Handler": "dist/index.getPersonajeUnicoHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-service-dev-getPersonajeUnico",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetPersonajeUnicoLogGroup"
              ]
            },
            "GetPersonajesUnicosLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-9d3b6be7-4e2c",
                  "S3Key": "serverless/swapi-service/dev/1729244276431-2024-10-18T09:37:56.431Z/swapi-service.zip"
                },
                "Handler": "dist/index.getPersonajesUnicosHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-service-dev-getPersonajesUnicos",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetPersonajesUnicosLogGroup"
              ]
            },
            "GetPeliculaLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-9d3b6be7-4e2c",
                  "S3Key": "serverless/swapi-service/dev/1729244276431-2024-10-18T09:37:56.431Z/swapi-service.zip"
                },
                "Handler": "dist/index.getPeliculaHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-service-dev-getPelicula",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetPeliculaLogGroup"
              ]
            },
            "GetPersonaLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-9d3b6be7-4e2c",
                  "S3Key": "serverless/swapi-service/dev/1729244276431-2024-10-18T09:37:56.431Z/swapi-service.zip"
                },
                "Handler": "dist/index.getPersonaHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-service-dev-getPersona",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetPersonaLogGroup"
              ]
            },
            "PostPersonajeUnicoLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-9d3b6be7-4e2c",
                  "S3Key": "serverless/swapi-service/dev/1729244276431-2024-10-18T09:37:56.431Z/swapi-service.zip"
                },
                "Handler": "dist/index.personajeUnicoHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-service-dev-postPersonajeUnico",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PostPersonajeUnicoLogGroup"
              ]
            },
            "GetApiDocsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-9d3b6be7-4e2c",
                  "S3Key": "serverless/swapi-service/dev/1729244276431-2024-10-18T09:37:56.431Z/swapi-service.zip"
                },
                "Handler": "dist/index.getApiDocsHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-service-dev-getApiDocs",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetApiDocsLogGroup"
              ]
            },
            "GetPersonajeUnicoLambdaVersiontRJx3RXSOzX46LQ9N4slduUPqfWiQ2QdHcsk8jKYaA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetPersonajeUnicoLambdaFunction"
                },
                "CodeSha256": "ydbXPxpQGV0Vvo6QLb4NDWGt4C/3F+DK16rz1gnzwho="
              }
            },
            "GetPersonajesUnicosLambdaVersioncZXF124MnXh4B8k45pHZiMkK6GzDZjQRWfWCXEUYE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetPersonajesUnicosLambdaFunction"
                },
                "CodeSha256": "ydbXPxpQGV0Vvo6QLb4NDWGt4C/3F+DK16rz1gnzwho="
              }
            },
            "GetPeliculaLambdaVersion1N2dtyp1K88XteAZOVdMa8HyeEJbNwvdyfiyrWKKH8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetPeliculaLambdaFunction"
                },
                "CodeSha256": "ydbXPxpQGV0Vvo6QLb4NDWGt4C/3F+DK16rz1gnzwho="
              }
            },
            "GetPersonaLambdaVersionWPbrkxrndi5VhOeiRfR08apoWXxn5Hzn8YdqoxkG3lo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetPersonaLambdaFunction"
                },
                "CodeSha256": "ydbXPxpQGV0Vvo6QLb4NDWGt4C/3F+DK16rz1gnzwho="
              }
            },
            "PostPersonajeUnicoLambdaVersionWKACYoe6zJHw7mBNzYtAmKXt1JuvN72qYlpiFkq7Zw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PostPersonajeUnicoLambdaFunction"
                },
                "CodeSha256": "ydbXPxpQGV0Vvo6QLb4NDWGt4C/3F+DK16rz1gnzwho="
              }
            },
            "GetApiDocsLambdaVersionb9ToQsMeZXMrLPUtm3SzZXd2v6iOlNpm1FqCZAMs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetApiDocsLambdaFunction"
                },
                "CodeSha256": "ydbXPxpQGV0Vvo6QLb4NDWGt4C/3F+DK16rz1gnzwho="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-swapi-service",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceGetpersonajeunico": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "get_personaje_unico",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceGetpersonajeunicoNombreunicoVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceGetpersonajeunico"
                },
                "PathPart": "{nombre_unico}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceGetpersonajesunicos": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "getPersonajesUnicos",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceGetpelicula": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "getPelicula",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceGetpeliculaIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceGetpelicula"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceGetpersona": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "getPersona",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceGetpersonaIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceGetpersona"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePostpersonajeunico": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "postPersonajeUnico",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceApiDashdocs": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "api-docs",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPostpersonajeunicoOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostpersonajeunico"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodApiDashdocsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiDashdocs"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodGetpersonajeunicoNombreunicoVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGetpersonajeunicoNombreunicoVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetPersonajeUnicoLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetPersonajeUnicoLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodGetpersonajesunicosGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGetpersonajesunicos"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetPersonajesUnicosLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetPersonajesUnicosLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodGetpeliculaIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGetpeliculaIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetPeliculaLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetPeliculaLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodGetpersonaIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGetpersonaIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetPersonaLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetPersonaLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPostpersonajeunicoPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePostpersonajeunico"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "PostPersonajeUnicoLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "PostPersonajeUnicoLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodApiDashdocsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiDashdocs"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetApiDocsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetApiDocsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1729244268481": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodPostpersonajeunicoOptions",
                "ApiGatewayMethodApiDashdocsOptions",
                "ApiGatewayMethodGetpersonajeunicoNombreunicoVarGet",
                "ApiGatewayMethodGetpersonajesunicosGet",
                "ApiGatewayMethodGetpeliculaIdVarGet",
                "ApiGatewayMethodGetpersonaIdVarGet",
                "ApiGatewayMethodPostpersonajeunicoPost",
                "ApiGatewayMethodApiDashdocsGet"
              ]
            },
            "GetPersonajeUnicoLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetPersonajeUnicoLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetPersonajesUnicosLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetPersonajesUnicosLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetPeliculaLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetPeliculaLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetPersonaLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetPersonaLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "PostPersonajeUnicoLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PostPersonajeUnicoLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetApiDocsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetApiDocsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-9d3b6be7-4e2c",
              "Export": {
                "Name": "sls-swapi-service-dev-ServerlessDeploymentBucketName"
              }
            },
            "GetPersonajeUnicoLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetPersonajeUnicoLambdaVersiontRJx3RXSOzX46LQ9N4slduUPqfWiQ2QdHcsk8jKYaA"
              },
              "Export": {
                "Name": "sls-swapi-service-dev-GetPersonajeUnicoLambdaFunctionQualifiedArn"
              }
            },
            "GetPersonajesUnicosLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetPersonajesUnicosLambdaVersioncZXF124MnXh4B8k45pHZiMkK6GzDZjQRWfWCXEUYE"
              },
              "Export": {
                "Name": "sls-swapi-service-dev-GetPersonajesUnicosLambdaFunctionQualifiedArn"
              }
            },
            "GetPeliculaLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetPeliculaLambdaVersion1N2dtyp1K88XteAZOVdMa8HyeEJbNwvdyfiyrWKKH8"
              },
              "Export": {
                "Name": "sls-swapi-service-dev-GetPeliculaLambdaFunctionQualifiedArn"
              }
            },
            "GetPersonaLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetPersonaLambdaVersionWPbrkxrndi5VhOeiRfR08apoWXxn5Hzn8YdqoxkG3lo"
              },
              "Export": {
                "Name": "sls-swapi-service-dev-GetPersonaLambdaFunctionQualifiedArn"
              }
            },
            "PostPersonajeUnicoLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PostPersonajeUnicoLambdaVersionWKACYoe6zJHw7mBNzYtAmKXt1JuvN72qYlpiFkq7Zw"
              },
              "Export": {
                "Name": "sls-swapi-service-dev-PostPersonajeUnicoLambdaFunctionQualifiedArn"
              }
            },
            "GetApiDocsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetApiDocsLambdaVersionb9ToQsMeZXMrLPUtm3SzZXd2v6iOlNpm1FqCZAMs"
              },
              "Export": {
                "Name": "sls-swapi-service-dev-GetApiDocsLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-swapi-service-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "getPersonajeUnico": {
          "handler": "dist/index.getPersonajeUnicoHandler",
          "events": [
            {
              "http": {
                "path": "get_personaje_unico/{nombre_unico}",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "swapi-service-dev-getPersonajeUnico",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetPersonajeUnicoLambdaVersiontRJx3RXSOzX46LQ9N4slduUPqfWiQ2QdHcsk8jKYaA"
        },
        "getPersonajesUnicos": {
          "handler": "dist/index.getPersonajesUnicosHandler",
          "events": [
            {
              "http": {
                "path": "getPersonajesUnicos",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "swapi-service-dev-getPersonajesUnicos",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetPersonajesUnicosLambdaVersioncZXF124MnXh4B8k45pHZiMkK6GzDZjQRWfWCXEUYE"
        },
        "getPelicula": {
          "handler": "dist/index.getPeliculaHandler",
          "events": [
            {
              "http": {
                "path": "getPelicula/{id}",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "swapi-service-dev-getPelicula",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetPeliculaLambdaVersion1N2dtyp1K88XteAZOVdMa8HyeEJbNwvdyfiyrWKKH8"
        },
        "getPersona": {
          "handler": "dist/index.getPersonaHandler",
          "events": [
            {
              "http": {
                "path": "getPersona/{id}",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "swapi-service-dev-getPersona",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetPersonaLambdaVersionWPbrkxrndi5VhOeiRfR08apoWXxn5Hzn8YdqoxkG3lo"
        },
        "postPersonajeUnico": {
          "handler": "dist/index.personajeUnicoHandler",
          "events": [
            {
              "http": {
                "path": "postPersonajeUnico",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "swapi-service-dev-postPersonajeUnico",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "PostPersonajeUnicoLambdaVersionWKACYoe6zJHw7mBNzYtAmKXt1JuvN72qYlpiFkq7Zw"
        },
        "getApiDocs": {
          "handler": "dist/index.getApiDocsHandler",
          "events": [
            {
              "http": {
                "path": "api-docs",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "swapi-service-dev-getApiDocs",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetApiDocsLambdaVersionb9ToQsMeZXMrLPUtm3SzZXd2v6iOlNpm1FqCZAMs"
        }
      },
      "plugins": [
        "serverless-offline"
      ],
      "package": {
        "exclude": [
          "src/**"
        ],
        "artifactsS3KeyDirname": "serverless/swapi-service/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-east-1-9d3b6be7-4e2c",
        "artifact": "/Users/sergio/Desktop/WORKWORK/sofftek /swapi-test/.serverless/swapi-service.zip",
        "artifactDirectoryName": "serverless/swapi-service/dev/1729244276431-2024-10-18T09:37:56.431Z"
      }
    },
    "serviceRawFile": "service: swapi-service\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  region: us-east-1\n\nfunctions:\n  getPersonajeUnico:\n    handler: dist/index.getPersonajeUnicoHandler\n    events:\n      - http:\n          path: get_personaje_unico/{nombre_unico}\n          method: get\n\n  getPersonajesUnicos:\n    handler: dist/index.getPersonajesUnicosHandler\n    events:\n      - http:\n          path: getPersonajesUnicos\n          method: get\n\n  getPelicula:\n    handler: dist/index.getPeliculaHandler\n    events:\n      - http:\n          path: getPelicula/{id}\n          method: get\n  \n  getPersona:\n    handler: dist/index.getPersonaHandler\n    events:\n      - http:\n          path: getPersona/{id}\n          method: get\n\n  postPersonajeUnico:\n    handler: dist/index.personajeUnicoHandler  # El handler que definimos en src/index.ts\n    events:\n      - http:\n          path: postPersonajeUnico  # El endpoint\n          method: post  # Es un método POST\n          cors: true  # Habilitar CORS si es necesario para el frontend\n\n  getApiDocs:\n    handler: dist/index.getApiDocsHandler  # El handler que definimos en src/index.ts\n    events:\n      - http:\n          path: api-docs  # El endpoint\n          method: get  # Es un método POST\n          cors: true  # Habilitar CORS si es necesario para el frontend\n\n\nplugins:\n  # - serverless-plugin-typescript\n  - serverless-offline\n\npackage:\n  exclude:\n    # - node_modules/**\n    - src/**\n\n# custom:\n#   build:\n#     esbuild: false\n#     minify: true\n#     sourcemap: true\n#     target: 'node18'\n#     platform: 'node'\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "875ddd785dadd1d4f86cc4fe805b4157",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "7b9e15b9-f1ff-412b-95bd-9ccef8b7d8b4",
    "orgName": "yeyodev",
    "userId": "t0qhYY7XzrWZs97lyL",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "yeyodev",
    "subscription": null,
    "userEmail": "sergio.ramos@utec.edu.pe",
    "serviceProviderAwsRegion": "us-east-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "851725629641",
    "projectType": "traditional",
    "versionSf": "4.4.6",
    "serviceProviderAwsCfStackName": "swapi-service-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:us-east-1:851725629641:stack/swapi-service-dev/55fa0510-8d30-11ef-b355-0e2365b6cbe7",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:851725629641:stack/swapi-service-dev/55fa0510-8d30-11ef-b355-0e2365b6cbe7",
    "serviceProviderAwsCfStackCreated": "2024-10-18T09:07:01.363Z",
    "serviceProviderAwsCfStackUpdated": "2024-10-18T09:38:22.992Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "GetPersonajeUnicoLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:851725629641:function:swapi-service-dev-getPersonajeUnico:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-swapi-service-dev-GetPersonajeUnicoLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetPeliculaLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:851725629641:function:swapi-service-dev-getPelicula:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-swapi-service-dev-GetPeliculaLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetPersonaLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:851725629641:function:swapi-service-dev-getPersona:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-swapi-service-dev-GetPersonaLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetApiDocsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:851725629641:function:swapi-service-dev-getApiDocs:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-swapi-service-dev-GetApiDocsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetPersonajesUnicosLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:851725629641:function:swapi-service-dev-getPersonajesUnicos:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-swapi-service-dev-GetPersonajesUnicosLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "PostPersonajeUnicoLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:851725629641:function:swapi-service-dev-postPersonajeUnico:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-swapi-service-dev-PostPersonajeUnicoLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://qn63rn48g2.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-swapi-service-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-9d3b6be7-4e2c",
        "ExportName": "sls-swapi-service-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}